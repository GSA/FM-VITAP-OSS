@model VITAP.Data.Models.Exceptions.MainExExpenseAccrualTabModel

@{
    var attrHeader = new { @style = "font-weight:bold;" };
    var attrTextAlignRight = new { @style = "text-align:right;" };
    var attrText = new { @class = "" };
    var attrLabel = new { @class = "control-label" };
}

<div id="tabAE" class="container-fluid peg-main-ex">
    <div class="form-group">
        <div class="row no-buffer">
            <div class="col-xs-2 sm-buffer">
                @Html.LabelFor(m => m.ActNumber, attrLabel)<br />
                @Html.TextBoxFor(m => m.ActNumber, attrText)<br />
            </div>
            <div class="col-xs-3 sm-buffer">
                @Html.LabelFor(m => m.ContractNumber, attrLabel)<br />
                @Html.TextBoxFor(m => m.ContractNumber, new { @style = "width: 300px;" })<br />
            </div>
            <div class="col-xs-2 sm-buffer">
                @Html.LabelFor(m => m.ReferencedAE, attrLabel)<br />
                @Html.TextBoxFor(m => m.ReferencedAE, attrText)<br />
            </div>
            <div class="col-xs-2 sm-buffer">
                @Html.LabelFor(m => m.ExpenseAccrualDocumentNumber, attrLabel)<br />
                @Html.TextBoxFor(m => m.ExpenseAccrualDocumentNumber, attrText)<br />
            </div>
            <div class="col-xs-1 sm-buffer">
                @Html.LabelFor(m => m.StampDate, attrLabel)<br />
                @Html.TextBoxFor(m => m.StampDate, attrText)<br />
            </div>
        </div>
    </div>
    <div class="container-fluid peg-main-ex">
        <div class="form-group">
            <div class="row no-buffer">
                <div class="col-xs-1 sm-buffer">
                    @Html.LabelFor(m => m.MDL, attrLabel) <br />
                    @Html.TextBoxFor(m => m.MDL, attrText)<br />
                </div>
                <div class="col-xs-1 sm-buffer">
                    @Html.LabelFor(m => m.OrgCode, attrLabel) <br />
                    @Html.TextBoxFor(m => m.OrgCode, attrText)<br />
                </div>
                <div class="col-xs-1 sm-buffer">
                    @Html.LabelFor(m => m.FC, attrLabel) <br />
                    @Html.TextBoxFor(m => m.FC, attrText)
                </div>
                <div class="col-xs-2 sm-buffer">
                    @Html.LabelFor(m => m.AccrualAmount, attrLabel) <br />
                    @Html.TextBoxFor(m => m.AccrualAmount, attrText)<br />
                </div>
                <div class="col-xs-2 sm-buffer">
                    <span>
                        <button type="button" id="btnViewRefAE" class="btn sm-buffer" style="width:110px;">View Ref AE</button>
                    </span>
                </div>
                <div class="col-xs-4 no-buffer">
                    <label style="margin-left: 40px">
                        Period of Performance<br />
                    </label>
                    <div class="col-xs-3">
                        @Html.LabelFor(m => m.StartDate, attrLabel)<br />
                        @Html.TextBoxFor(m => m.StartDate, attrText)
                    </div>
                    <div class="col-xs-3">
                        @Html.LabelFor(m => m.EndDate, attrLabel)<br />
                        @Html.TextBoxFor(m => m.EndDate, attrText)
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row no-buffer">
                <div class="col-xs-10 no-buffer">
                    <h3 style="margin:20px 0px 0px 0px;">Accounting Information</h3>
                </div>
                <div class="col-xs-pull-1">
                    <button type="button" id="btnViewAE" class="btn" style="width:90px;">View AE</button>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row no-buffer">
                <div class="col-xs-12 no-buffer">
                    @{
                        Html.Kendo().Grid(Model.AccountingInfo)
                            .Name("grdExpenseAccrualAccountInfo")
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(10)
                                .ServerOperation(false)
                                )
                            .Columns(columns =>
                            {
                                columns.Bound(x => x.Lnum).Width(100).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.CLIN).Width(120).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.MdlAmount).Width(140).HeaderHtmlAttributes(attrHeader).HtmlAttributes(attrTextAlignRight);
                                columns.Bound(x => x.Fund).Width(90).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.FundFY).Width(120).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.OrgCode).Width(120).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.BA).Width(80).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.FC).Width(80).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.CE).Width(80).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.ProjectId).Width(130).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.RWA).Width(130).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.WorkItem).Width(120).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.BuildingNumer).Width(140).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.PopStartDate).Width(150).HeaderHtmlAttributes(attrHeader);
                                columns.Bound(x => x.PopEndDate).Width(150).HeaderHtmlAttributes(attrHeader);
                            })
                            .Resizable(r => r.Columns(true))
                            .ToolBar(tools => tools.Excel())
                            .Excel(excel => excel
                                .FileName("ExpenseAccrualAccountInfo-" + DateTime.Today.ToString("yyyy-MM-dd") + ".xlsx")
                                .ProxyURL(Url.Action("Excel_Export_Save", "VitapBase"))
                                .AllPages(true)
                            )
                            .Pageable(p => p.PageSizes(new object[] { 10, 20, 50, 100, 200, 500, 1000 }))
                            .Render();
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $().ready(function () {
        ConfigureKendoGridPaginationControlsFor508('grdExpenseAccrualAccountInfo');
        MakeKendoGridScrollable('grdExpenseAccrualAccountInfo', "120px");
        $('#tabAE :input').attr('disabled', 'disabled');
        if ('@Model.BtnRefAE.Enabled' != 'True')
            $('#btnViewRefAE').attr('disabled', 'disabled');
        else
            $('#btnViewRefAE').removeAttr('disabled');
        if ('@Model.BtnAE.Enabled' != 'True')
            $('#btnViewAE').attr('disabled', 'disabled');
        else
            $('#btnViewAE').removeAttr('disabled');
        $('.k-grid-excel').removeAttr('disabled');
    });

    $("#btnViewAE").on("click", function () {
        var url = '@Url.Action("ViewEstimatedAccrual", "TransHist", new { ae_Id = Model.BtnAE.Id })';
        window.location = url;
    });

    $("#btnViewRefAE").on("click", function () {
        var url = '@Url.Action("ViewEstimatedAccrual", "TransHist", new { ae_Id = Model.BtnRefAE.Id })';
        window.location = url;
    });
</script>
