@* MAND MEMO MODAL *@
@model VITAP.Data.Models.Exceptions.UserExceptionViewModel

@{
    ViewBag.Title = "Pegasys Exception (" + Model.ErrorCode + " - " + Model.Memo;
    Layout = "~/Views/Shared/_ModalMenuLayout.cshtml";
}

@{Model.BigImgPg = Model.StartPg;}

    <div class="container-fluid">
        <div style = "padding:10px" >
            <div class="row">
                <div class="col-md-12">
                    @{
                        string bigSrc = Url.Action("ViewTiffAtPath", "Exceptions", new { View = "1", FilePath = HttpUtility.UrlEncode(Model.TiffFilePath), Pg = Model.BigImgPg, Height = Model.DefaultBigHeight, Width = Model.DefaultBigWidth, unsized = "1" });
                        <div id="tiffCanvasWrapper"><canvas></canvas></div>
                        <div style = "margin:5px" >
                            <a id="_hlRot270" href="javascript:void(0);">[Rotate Left]</a>
                            <a id="_hlRot90" href="javascript:void(0);">[Rotate Right]</a>
                            <a id="_hlRot180" href="javascript:void(0);">[Rotate 180]</a>
                            <a id="_tiffZoomIn" href="javascript:void(0);">[Zoom In]</a>
                            <a id="_tiffZoomOut" href="javascript:void(0);">[Zoom Out]</a>
                            <a id="_revert" href="javascript:void(0);">[Revert]</a>
                            @{
                                string pages = Model.TotalTIFPgs.ToString() + " Page" + (Model.TotalTIFPgs > 1 ? "s" : "");
                                <label>@pages</label>
                            }
                        </div>
                    }
                    <table id = "_tblImgs" >
                        <tr>
                            <td >
                                @{
                                    //Determine Start/End Pages
                                    Model.StartPg = 1;
                                    if (Request.QueryString["StartPage"] != null)
                                    {
                                        Model.StartPg = System.Convert.ToInt16(Request.QueryString["StartPage"]);
                                    }

                                    //int BigImgPg = Model.StartPg;
                                    Model.EndPg = Model.StartPg + (Model.PagerSize - 1);
                                    if (Model.EndPg > Model.TotalTIFPgs)
                                    {
                                        Model.EndPg = Model.TotalTIFPgs;
                                    }

                                    //Add/configure the thumbnails
                                    var pagerPage = Model.StartPg - 1;
                                    while (pagerPage < Model.EndPg)
                                    {
                                        pagerPage = pagerPage + 1;
                                        if (pagerPage % 4 == 0 && pagerPage != 0)
                                        {
                                            <label>&nbsp;<br /></label>
                                            }
                                            else
                                            {
                                            <label>&nbsp;</label>
                                        }

                                        string src = Url.Action("ViewTiffAtPath", "Exceptions", new { View = "1", FilePath = Model.TiffFilePath, Pg = pagerPage, Height = Model.DefaultThumbHeight, Width = Model.DefaultThumbWidth });
                                        <img onclick = "ChangePg(@pagerPage)" style="border: 1px solid black" src="@src" />
                                    }

                                        //ConfigPagers
                                        //Config first pager
                                        if ((Model.TotalTIFPgs / Model.PagerSize) >= 1)
                                        {
                                            string linkText;
                                               string linkUrl;

                                            if ((1 + Model.PagerSize) > Model.TotalTIFPgs)
                                            {
                                                linkText = "1-" + Model.TotalTIFPgs;
                                            }
                                            else
                                            {
                                                linkText = "1-" + Model.PagerSize;
                                            }

                                            <label>&nbsp;</label>
                                            if (Request.Url.ToString().IndexOf("&StartPage=") >= 0)
                                            {
                                                linkUrl = Request.Url.ToString().Substring(0, Request.Url.ToString().IndexOf("&StartPage=")) + "&StartPage=1";
                                            }
                                            else
                                            {
                                                linkUrl = Request.Url.ToString() + "";
                                            }

                                            <a style = "display:block" href="@linkUrl">@linkText</a>

                                        }

                                        //Config the rest of the page pagers
                                        for (int i = 1; i <= (Model.TotalTIFPgs / Model.PagerSize); i++)
                                        {
                                        <label>&nbsp;</label>
                                            string otherLinkUrl;
                                            string otherLinkText;

                                            if (i == (Model.TotalTIFPgs / Model.PagerSize))
                                            {
                                                otherLinkText = ((i* Model.PagerSize) + 1).ToString() + "-" + Model.TotalTIFPgs;
                                            }
                                            else
                                            {
                                                otherLinkText = ((i* Model.PagerSize) + 1).ToString() + "-" + (((i + 1) * Model.PagerSize)).ToString();
                                            }

                                            if (Request.Url.ToString().IndexOf("&StartPage=") >= 0)
                                            {
                                                otherLinkUrl = Request.Url.ToString().Substring(0, Request.Url.ToString().IndexOf("&StartPage=")) + "&StartPage=" + ((i* Model.PagerSize) + 1).ToString();
                                            }
                                            else
                                            {
                                                otherLinkUrl = Request.Url.ToString() + "&StartPage=" + ((i* Model.PagerSize) + 1).ToString();
                                            }

                                            <a href = "@otherLinkUrl" > @otherLinkText </a>
                                        }
                                }
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>


<script type="text/javascript">
	var currentRotationDegrees = 0;
    var originalHeight = 0;
    var originalWidth = 0;
    var imageHeight = 0;
    var imageWidth = 0;

	$(document).ready(function () {
	    window.type = '@Model.TiffType';
	    window.typeId = '@Model.TiffTypeId';
        window.filePath = '@HttpUtility.UrlEncode(Model.TiffFilePath)';

	    window.bigSrc = '@Url.Action("ViewTiffAtPath", "Exceptions", new { View = "1", FilePath = "JSFILEPATH", Pg = Model.StartPg, Height = "600", Width = "600", unsized = "1" })';
        gkhead.src = ReplaceFilePathAndAmps(window.bigSrc);
	});

    function ChangePg(Pg) {
        SrcBig = '@Url.Action("ViewTiffAtPath", "Exceptions", new { View = "1", FilePath = "JSFILEPATH", Pg = "JSPAGE", Height = "800", Width = "800", unsized = "1" })';
        SrcBig = SrcBig.replace("JSPAGE", Pg);
        SrcBig = ReplaceFilePathAndAmps(SrcBig);

	    gkhead.src = SrcBig;
	}

    function ReplaceFilePathAndAmps(SrcStr)
    {
        var newStr = SrcStr.replace("JSFILEPATH", window.filePath);
        return newStr.replaceAll('amp;', '');
    }

	function GetBigSrc(Qrystr)
	{
	    var Qry = document.getElementById('_imgBig').src;
	    gy = Qry.split("&");
	    for (i=0;i<gy.length;i++)
	    {
	        ft = gy[i].split("=");
	        if (ft[0] == Qrystr)
	            return ft[1];
	    }
	}

    var canvas = document.getElementsByTagName('canvas')[0];

    window.addEventListener("resize", handleResize);
    function handleResize() {
        redraw();
    }

    var gkhead = new Image();
    gkhead.onload = function () {
        // Load full-size.
        canvas.width = this.naturalWidth;
        canvas.height = this.naturalHeight;
        redraw();

        // Initial zoom out to half of browser width.
        var width = $(parent.window).width() / 2;
        var scaleFactor = 1.1;
        var zoomFactor = Math.pow(scaleFactor,-1);
        if (canvas.width > width) {
            var ctx = canvas.getContext('2d');

            var clicks = 1;
            var newWidth = canvas.width * zoomFactor;
            while (newWidth > width) {
                newWidth = newWidth * zoomFactor;
                clicks++;
            }

            var factor = Math.pow(scaleFactor, -clicks);
            ctx.scale(factor, factor);
            canvas.height = canvas.height * factor;
            canvas.width = canvas.width * factor;

            redraw();
        }
        originalHeight = canvas.height;
        originalWidth = canvas.width;
        imageHeight = canvas.height;
        imageWidth = canvas.width;
	}
	String.prototype.replaceAll = function(search, replacement) {
	    var target = this;
	    return target.split(search).join(replacement);
	};

	function redraw(){
	    var ctx = canvas.getContext('2d');

	    ctx.save();
	    ctx.setTransform(1,0,0,1,0,0);
	    ctx.clearRect(0,0,canvas.width,canvas.height);
	    ctx.restore();
	    ctx.drawImage(gkhead,0,0,canvas.width,canvas.height);
	}

	window.onload = function(){
	    var ctx = canvas.getContext('2d');

	    redraw();

	    var scaleFactor = 1.1;

	    var zoom = function(clicks){
	        var factor = Math.pow(scaleFactor,clicks);
	        ctx.scale(factor, factor);
	        canvas.height = canvas.height * factor;
	        canvas.width = canvas.width * factor;
	        imageHeight = imageHeight * factor;
	        imageWidth = imageWidth * factor;
	        redraw();
	        drawRotated(currentRotationDegrees);
	    }

	    var tiffZoomOut = function () {
	        zoom(-1);
	    }
	    var tiffZoomIn = function () {
	        zoom(1);
	    }

	    $('#_hlRot270').click(function() { drawRotated(-90); });
	    $('#_hlRot90').click(function () { drawRotated(90); });
	    $('#_hlRot180').click(function () { drawRotated(180); });
	    $('#_tiffZoomOut').click(tiffZoomOut);
	    $('#_tiffZoomIn').click(tiffZoomIn);
	    $('#_revert').click(tiffRevert);
	};

	function drawRotated(degrees) {
	    var ctx = canvas.getContext('2d');
        var newWidth = startWidth = canvas.width;
        var newHeight = startHeight = canvas.height;
        var newWidthOffset = -newWidth/2;
        var newHeightOffset = -newHeight/2;
        var orientationChange = Math.abs((currentRotationDegrees + degrees)/90%2);

        // If rotating right or left - change canvas dimensions. Clears rect when changing canvas size.
        if (orientationChange) {
	        newWidth = canvas.height;   // use new<> to swap values
	        newHeight = canvas.width;
            canvas.width = newWidth;
            canvas.height = newHeight;
	    } else {
	        ctx.clearRect(0, 0, canvas.width, canvas.height);
	    }

	    currentRotationDegrees = degrees;           // Applied after zoom.

	    ctx.save();
	    ctx.translate(canvas.width / 2, canvas.height / 2);
	    ctx.rotate(degrees * Math.PI / 180);
	    ctx.drawImage(gkhead, -imageWidth/2, -imageHeight/2, imageWidth, imageHeight);   // since we may be drawing on rotated canvas use start<> values.
	    ctx.restore();
	}

	function tiffRevert() {
	    var ctx = canvas.getContext('2d');
	    currentRotationDegrees = 0;         // if reverting, clear current rotation.

	    canvas.width = originalWidth;
	    canvas.height = originalHeight;
	    imageWidth = originalWidth;
	    imageHeight = originalHeight;
	    ctx.save();
	    ctx.drawImage(gkhead, 0, 0, originalWidth, originalHeight);
	    ctx.restore();
	}

</script>
